@model Capstone.Web.Models.Table

@{
    ViewBag.Title = "Table";
    

    int i = 0;

    int seated = 1;

    string player = "player" + seated;

    List<bool> discardList = new List<bool>() { false, false, false, false, false };

}

<section>

    <script src="~/Scripts/CardSelectionJavaScript.js"></script>
    <div id="gameArea" data-tableID ="@Model.TableID">
        <h2>@Model.Name</h2>

        <div id="populatedGameArea">
            <img src="~/Content/img/ovalpokertable.png" />
            @if (Model.StateCounter == 7)
            {
                <div id="tableCenter">
                    <p>@Model.Winner</p>
                </div>
            }
            else
            {
                <div id="tableCenter">
                    <p>Current Pot</p>
                    <p>@Model.Pot.ToString("C0")</p>
                </div>
            }

            @foreach (var seat in Model.Seats)
            {
                if (seat.Username.ToLower() == Session["username"].ToString().ToLower())
                {
                    <div id="@player">
                        @if (Model.Seats[i].Occupied && Model.Seats[i].IsTurn)
                        {
                            <p id="currentPlayer">@seat.Username</p>
                        }
                        else
                        {
                            <p>@Model.Seats[i].Username</p>
                        }
                        <p>@Model.Seats[i].TableBalance.ToString("C0")</p>
                    </div>

                    <div id="userCards">
                        @if (!seat.HasFolded)
                        {
                            for (int j = 0; j < Model.Seats[i].Hand.MyHand.Count; j++)
                            {

                                if (Model.Seats[i].Hand.MyHand[j].Suit.ToLower() == "diamonds" || Model.Seats[i].Hand.MyHand[j].Suit.ToLower() == "hearts")
                                {
                                    <div data-suit="@Model.Seats[i].Hand.MyHand[j].Suit" data-number="@Model.Seats[i].Hand.MyHand[j].Number" class="playingCard red">
                                        <p>@Model.Seats[i].Hand.MyHand[j].ConvertedNumber @Model.Seats[i].Hand.MyHand[j].SuitLetter</p>
                                    </div>
                                }
                                else
                                {
                                    <div data-suit="@Model.Seats[i].Hand.MyHand[j].Suit" data-number="@Model.Seats[i].Hand.MyHand[j].Number" class="playingCard black">
                                        <p>@Model.Seats[i].Hand.MyHand[j].ConvertedNumber @Model.Seats[i].Hand.MyHand[j].SuitLetter</p>
                                    </div>
                                }
                            }
                        }
                    </div>

                    if (Model.Seats[i].Occupied && Model.Seats[i].IsTurn && !Model.Seats[i].HasFolded)
                    {
                        if (Model.StateCounter == 2)
                        {
                            using (Html.BeginForm("ConfirmAnte", "Game", FormMethod.Post))
                            {
                                @Html.HiddenFor(m => m.TableID)

                                <button>Ante</button>
                            }
                            using (Html.BeginForm("PlayerFolded", "Game", FormMethod.Post))
                            {
                                @Html.HiddenFor(m => m.TableID)

                                <button>Fold</button>
                            }
                        }
                        else if (Model.StateCounter == 4 || Model.StateCounter == 6)
                        {
                            int maxCurrentBet = 0;
                            foreach (var s in Model.Seats)
                            {
                                if (s.CurrentBet > maxCurrentBet)
                                {
                                    maxCurrentBet = s.CurrentBet;
                                }
                            }

                            if (maxCurrentBet == 0)
                            {
                                using (Html.BeginForm("PlayerCalled", "Game", FormMethod.Post))
                                {
                                    @Html.HiddenFor(m => m.TableID)
                                    @Html.Hidden("myBet", Model.Seats[i].CurrentBet)
                                    @Html.Hidden("betToCall", maxCurrentBet)

                                    <button>Check</button>
                                }
                                using (Html.BeginForm("PlayerBet", "Game", FormMethod.Post))
                                {
                                    @Html.HiddenFor(m => m.TableID)
                                    @Html.Hidden("myBet", Model.Seats[i].CurrentBet)
                                    @Html.Hidden("betToCall", maxCurrentBet)
                                    @Html.TextBox("newBet")
                                    <button>Bet</button>
                                }
                                using (Html.BeginForm("PlayerFolded", "Game", FormMethod.Post))
                                {
                                    @Html.HiddenFor(m => m.TableID)

                                    <button>Fold</button>
                                }
                            }
                            else if (maxCurrentBet > 0)
                            {
                                using (Html.BeginForm("PlayerCalled", "Game", FormMethod.Post))
                                {
                                    @Html.HiddenFor(m => m.TableID)
                                    @Html.Hidden("myBet", Model.Seats[i].CurrentBet)
                                    @Html.Hidden("betToCall", maxCurrentBet)

                                    <button>Call</button>
                                }
                                using (Html.BeginForm("PlayerBet", "Game", FormMethod.Post))
                                {
                                    @Html.HiddenFor(m => m.TableID)
                                    @Html.Hidden("myBet", Model.Seats[i].CurrentBet)
                                    @Html.Hidden("betToCall", maxCurrentBet)
                                    @Html.TextBox("newBet")
                                    <button>Raise</button>
                                }
                                using (Html.BeginForm("PlayerFolded", "Game", FormMethod.Post))
                                {
                                    @Html.HiddenFor(m => m.TableID)

                                    <button>Fold</button>
                                }
                            }
                        }
                        else if (Model.StateCounter == 5)
                        {
                            using (Html.BeginForm("ReplaceCards", "Game", FormMethod.Post, new { id = "discardForm" }))
                            {
                                @Html.HiddenFor(m => m.TableID)
                                @Html.Hidden("Username", (string)Session["Username"])

                                <div id="discardList">
                                </div>

                                <button id="discardButton">Discard</button>
                            }
                        }
                    }
                    if (Model.StateCounter == 7)
                    {
                        using (Html.BeginForm("NextHand", "Game", FormMethod.Post, new { id = "discardForm" }))
                        {
                            @Html.HiddenFor(m => m.TableID)

                            <button>Ready to Continue</button>
                        }
                    }
                    seated++;
                    player = "player" + seated;

                    break;
                }
                i++;
            }

            @for (int j = i + 1; j < 5; j++)
            {
                <div id="@player">

                    @if (Model.Seats[j].Occupied && Model.Seats[j].IsTurn)
                    {
                        <p id="currentPlayer">@Model.Seats[j].Username</p>
                    }
                    else
                    {
                        <p>@Model.Seats[j].Username</p>
                    }
                    <p>@Model.Seats[j].TableBalance.ToString("C0")</p>
                    @if (Model.StateCounter == 7)
                    {
                        if (!Model.Seats[j].HasFolded && Model.Seats[j].Occupied)
                        {
                            for (int k = 0; k < Model.Seats[i].Hand.MyHand.Count; k++)
                            {

                                if (Model.Seats[j].Hand.MyHand[k].Suit.ToLower() == "diamonds" || Model.Seats[j].Hand.MyHand[k].Suit.ToLower() == "hearts")
                                {
                                    <div class="playingCard red">
                                        <p>@Model.Seats[j].Hand.MyHand[k].ConvertedNumber @Model.Seats[j].Hand.MyHand[k].SuitLetter</p>
                                    </div>
                                }
                                else
                                {
                                    <div class="playingCard black">
                                        <p>@Model.Seats[j].Hand.MyHand[k].ConvertedNumber @Model.Seats[j].Hand.MyHand[k].SuitLetter</p>
                                    </div>
                                }
                            }
                        }
                    }
                    else
                    {
                        if (!Model.Seats[j].HasFolded && Model.Seats[j].Occupied)
                        {
                            for (int k = 0; k < Model.Seats[j].Hand.MyHand.Count; k++)
                            {
                                <div class="cardBack"></div>
                            }
                        }
                    }
                </div>

                seated++;
                player = "player" + seated;

            }
            @for (int j = 0; j < i; j++)
            {
                <div id="@player">

                    @if (Model.Seats[j].Occupied && Model.Seats[j].IsTurn)
                    {
                        <p id="currentPlayer">@Model.Seats[j].Username</p>
                    }
                    else
                    {
                        <p>@Model.Seats[j].Username</p>
                    }
                    <p>@Model.Seats[j].TableBalance.ToString("C0")</p>
                    @if (Model.StateCounter == 7)
                    {
                        if (!Model.Seats[j].HasFolded && Model.Seats[j].Occupied)
                        {
                            for (int k = 0; k < Model.Seats[i].Hand.MyHand.Count; k++)
                            {

                                if (Model.Seats[j].Hand.MyHand[k].Suit.ToLower() == "diamonds" || Model.Seats[j].Hand.MyHand[k].Suit.ToLower() == "hearts")
                                {
                                    <div class="playingCard red">
                                        <p>@Model.Seats[j].Hand.MyHand[k].ConvertedNumber @Model.Seats[j].Hand.MyHand[k].SuitLetter</p>
                                    </div>
                                }
                                else
                                {
                                    <div class="playingCard black">
                                        <p>@Model.Seats[j].Hand.MyHand[k].ConvertedNumber @Model.Seats[j].Hand.MyHand[k].SuitLetter</p>
                                    </div>
                                }
                            }
                        }
                    }
                    else
                    {
                        if (!Model.Seats[j].HasFolded && Model.Seats[j].Occupied)
                        {
                            for (int k = 0; k < Model.Seats[j].Hand.MyHand.Count; k++)
                            {
                                <div class="cardBack"></div>
                            }
                        }
                    }
                </div>

                seated++;
                player = "player" + seated;
            }
        </div>
    </div>
</section>
<script type="text/javascript">
    @if(Model.IsTurn(Session["username"].ToString().ToLower()))
    {
        @Html.Raw("clearInterval(interval);");
    }

</script>
